# -*- coding: utf-8 -*-


# Big F*n simulator.
# Create a grid fin

import FreeCAD
import math
import Draft, Part

def toRad(angle):
    return angle * math.pi * 2.0 / 360.0

# mm
INNER_RADIUS = 4550.0
OUTER_RADIUS = 4850.0

HEIGHT2 = 3000.0
GRID_SPACE = HEIGHT2 / 6.0
WIDTH = GRID_SPACE * 5.0
# radians covered by the width
WIDTH_ANGLE = WIDTH / OUTER_RADIUS
HEIGHT1 = GRID_SPACE * 5.0
# intersections per strip
INTERSECTIONS = 11.0
doc = App.activeDocument()
depth = Draft.Vector(INNER_RADIUS - OUTER_RADIUS, 0, 0)


def polarToXYZ(angle, radius, z):
    x = radius * math.cos(angle)
    y = -radius * math.sin(angle)
    return Draft.Vector(x, y, z)

lineSegments = 16

# make an arc between 2 points, with a height given
# easier than using Draf.makeCircle
def makeArc(point1, point2, height, extraPoint):
    result = []
    steps = lineSegments
    if extraPoint:
        steps = steps + 1
	
    for i in range(steps):
        fraction = float(i) / float(steps - 1)
        x = fraction * (point2.x - point1.x) + point1.x
        y = fraction * (point2.y - point1.y) + point1.y
        z = fraction * (point2.z - point1.z) + point1.z
        a = math.sin(fraction * math.pi) * height
        result.append(Draft.Vector(x + a, y, z))
    return result

def makeLine(point1, point2, extraPoint):
    result = []
    steps = lineSegments
    if extraPoint:
        steps = steps + 1
    for i in range(steps):
        fraction = float(i) / float(steps - 1)
        x = fraction * (point2.x - point1.x) + point1.x
        y = fraction * (point2.y - point1.y) + point1.y
        z = fraction * (point2.z - point1.z) + point1.z
        result.append(Draft.Vector(x, y, z))
    return result


def makeFace(startY, offset, reverse):
    # points for the outer edge
    outerPoints = []
    # points for the inner, serrated edge
    innerPoints = []
    
    
    endY = startY + HEIGHT1
    startX = -WIDTH_ANGLE / 2
    if reverse:
        startX = -startX
    

    for i in range(int(INTERSECTIONS)):
        if reverse:
            angle = startX - i / (INTERSECTIONS - 1) * WIDTH_ANGLE
        else:
            angle = startX + i / (INTERSECTIONS - 1) * WIDTH_ANGLE
        
        y = startY + i / (INTERSECTIONS - 1) * HEIGHT1

        if y >= 0 and y <= HEIGHT2:
            point = polarToXYZ(angle, OUTER_RADIUS, y)
            outerPoints.append(point)
    
    if len(outerPoints) >= 2:
        outerPoints2 = []
        for i in range(len(outerPoints) - 1):
            line = makeLine(outerPoints[i], outerPoints[i + 1], i == len(outerPoints) - 1)
            outerPoints2.extend(line)
    
        # make the inner, serrated points
        for i in range(len(outerPoints) - 1):
            arc = makeArc(outerPoints[i] + depth, outerPoints[i + 1] + depth, 100.0, i == len(outerPoints) - 1)
            innerPoints.extend(arc)
        
        wire1 = Draft.makeWire(outerPoints2, closed=False, face=False, support=None)
        wire2 = Draft.makeWire(innerPoints, closed=False, face=False, support=None)
        wire1.Placement = App.Placement(offset, App.Rotation(App.Vector(0,0,1), 0))
        wire2.Placement = App.Placement(offset, App.Rotation(App.Vector(0,0,1), 0))
        surface = doc.addObject('Part::RuledSurface','Ruled Surface')
        surface.Curve1 = wire1
        surface.Curve2 = wire2
        
        # combine the points into a face
        facePoints = []
        for i in outerPoints2:
            facePoints.append(i + offset)
        for i in range(len(innerPoints)):
            facePoints.append(innerPoints[len(innerPoints) - i - 1] + offset)
        facePoints.append(outerPoints2[0] + offset)

        return Draft.makeWire(facePoints, closed=False, face=True, support=None)
    
    else:
    
        return None
    
    
def makeSlice(startY, reverse):
    if reverse:
        wire1 = makeFace(startY, Draft.Vector(0.0, 2.0, -2.0), True)
        wire2 = makeFace(startY, Draft.Vector(0.0, -2.0, 2.0), True)
    else:
        wire1 = makeFace(startY, Draft.Vector(0.0, 2.0, 2.0), False)
        wire2 = makeFace(startY, Draft.Vector(0.0, -2.0, -2.0), False)
    
    if not wire1 is None:
        loft = doc.addObject('Part::Loft','Loft')
        loft.Sections = [wire1, wire2]
        loft.Solid = False
    
    

y = -HEIGHT2
while y < HEIGHT2:
    makeSlice(y, False)
    y = y + GRID_SPACE

y = -HEIGHT2
while y < HEIGHT2:
    makeSlice(y, True)
    y = y + GRID_SPACE
